// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/grammar/Rust.flex

package com.icp.intellij.rust.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.icp.intellij.rust.psi.RustTokenTypes;
import com.intellij.psi.TokenType;


public class RustLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\6\1\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\0\4\30\1\31\25\30\1\32"+
    "\1\33\1\34\1\35\1\30\1\0\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\30\1\44\1\45\2\30\1\46"+
    "\1\47\1\50\1\51\1\52\1\30\1\53\1\54\1\55"+
    "\1\56\1\30\1\57\1\30\1\60\1\30\1\61\1\62"+
    "\1\63\7\0\1\3\32\0\1\1\u01df\0\1\1\177\0"+
    "\13\1\35\0\2\3\5\0\1\1\57\0\1\1\240\0"+
    "\1\1\377\0\u0100\64";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\15\25\1\31\1\32\1\33\1\34"+
    "\1\0\1\35\1\0\1\36\1\37\1\40\1\0\1\41"+
    "\1\42\1\0\1\43\1\44\1\45\1\46\1\47\1\0"+
    "\1\50\1\51\1\0\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\5\25\1\63\1\25\1\64"+
    "\1\25\1\65\16\25\1\66\1\67\1\70\1\0\1\71"+
    "\1\72\1\73\5\25\1\74\1\25\1\75\2\25\1\5"+
    "\1\76\1\77\10\25\1\100\2\25\1\101\1\0\2\25"+
    "\1\102\1\103\1\25\1\104\1\105\2\25\1\106\4\25"+
    "\1\107\1\110\2\25\1\0\1\71\1\111\1\112\1\113"+
    "\1\114\3\25\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\65\0\u0109\0\u013e"+
    "\0\u0173\0\65\0\65\0\u01a8\0\u01dd\0\65\0\u0212\0\u0247"+
    "\0\u027c\0\u02b1\0\u02e6\0\65\0\u031b\0\u0350\0\u0385\0\u03ba"+
    "\0\65\0\65\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8"+
    "\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0"+
    "\0\65\0\u06d5\0\65\0\65\0\324\0\65\0\u070a\0\65"+
    "\0\65\0\65\0\u073f\0\65\0\u0774\0\u07a9\0\65\0\65"+
    "\0\65\0\65\0\u07de\0\u0813\0\u0848\0\65\0\u087d\0\65"+
    "\0\u08b2\0\65\0\65\0\65\0\65\0\u08e7\0\65\0\u03ba"+
    "\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u03ba\0\u0a25\0\u03ba"+
    "\0\u0a5a\0\u03ba\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40"+
    "\0\65\0\65\0\65\0\u0d75\0\u0daa\0\65\0\65\0\u0ddf"+
    "\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u03ba\0\u0ee8\0\u03ba\0\u0f1d"+
    "\0\u0f52\0\u03ba\0\u03ba\0\u03ba\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u03ba\0\u112f\0\u1164\0\65"+
    "\0\u1199\0\u11ce\0\u1203\0\u03ba\0\u03ba\0\u1238\0\u03ba\0\u03ba"+
    "\0\u126d\0\u12a2\0\u03ba\0\u12d7\0\u130c\0\u1341\0\u1376\0\u03ba"+
    "\0\u03ba\0\u13ab\0\u13e0\0\u1415\0\u1415\0\u03ba\0\u03ba\0\u03ba"+
    "\0\u03ba\0\u144a\0\u147f\0\u14b4\0\u03ba\0\u03ba\0\u03ba\0\u03ba"+
    "\0\u03ba\0\u03ba\0\u03ba";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\2\30\1\31"+
    "\1\2\1\32\1\33\1\34\1\30\1\35\1\30\1\36"+
    "\1\37\1\30\1\40\1\41\1\42\2\30\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\30\1\51\1\52\1\53"+
    "\1\2\66\0\3\3\107\0\1\54\36\0\5\55\1\56"+
    "\25\55\1\57\31\55\26\0\1\60\46\0\1\61\15\0"+
    "\1\62\36\0\11\63\1\64\16\63\2\65\1\63\1\66"+
    "\2\63\23\65\4\63\26\0\1\67\64\0\1\70\64\0"+
    "\1\71\1\72\55\0\1\73\60\0\1\74\4\0\1\75"+
    "\4\0\1\76\56\0\1\77\1\0\1\22\65\0\1\100"+
    "\66\0\1\101\1\102\64\0\1\103\1\104\63\0\1\105"+
    "\1\106\57\0\1\30\5\0\2\30\4\0\23\30\32\0"+
    "\1\107\60\0\1\30\5\0\2\30\4\0\16\30\1\110"+
    "\4\30\26\0\1\30\5\0\2\30\4\0\13\30\1\111"+
    "\1\30\1\112\5\30\26\0\1\30\5\0\2\30\4\0"+
    "\10\30\1\113\1\30\1\114\10\30\26\0\1\30\5\0"+
    "\2\30\4\0\1\115\11\30\1\116\1\117\7\30\26\0"+
    "\1\30\5\0\2\30\4\0\5\30\1\120\3\30\1\121"+
    "\1\122\10\30\26\0\1\30\5\0\2\30\4\0\4\30"+
    "\1\123\6\30\1\124\7\30\26\0\1\30\5\0\2\30"+
    "\4\0\1\125\12\30\1\126\4\30\1\127\2\30\26\0"+
    "\1\30\5\0\2\30\4\0\20\30\1\130\2\30\26\0"+
    "\1\30\5\0\2\30\4\0\4\30\1\131\16\30\26\0"+
    "\1\30\5\0\2\30\4\0\4\30\1\132\12\30\1\133"+
    "\1\134\2\30\26\0\1\30\5\0\2\30\4\0\15\30"+
    "\1\135\4\30\1\136\26\0\1\30\5\0\2\30\4\0"+
    "\16\30\1\137\4\30\26\0\1\30\5\0\2\30\4\0"+
    "\6\30\1\140\14\30\32\0\1\141\33\0\1\142\2\0"+
    "\2\55\2\0\60\55\1\0\11\63\1\64\21\63\1\66"+
    "\42\63\1\64\10\63\1\65\5\63\2\65\1\63\1\66"+
    "\2\63\23\65\6\63\2\0\60\63\27\0\1\143\36\0"+
    "\14\74\1\144\50\74\2\75\1\0\62\75\22\0\1\145"+
    "\70\0\1\146\64\0\1\147\60\0\1\30\5\0\2\30"+
    "\4\0\12\30\1\150\10\30\26\0\1\30\5\0\2\30"+
    "\4\0\1\151\22\30\26\0\1\30\5\0\2\30\4\0"+
    "\16\30\1\152\4\30\26\0\1\30\5\0\2\30\4\0"+
    "\20\30\1\153\2\30\26\0\1\30\5\0\2\30\4\0"+
    "\10\30\1\154\12\30\26\0\1\30\5\0\2\30\4\0"+
    "\15\30\1\155\5\30\26\0\1\30\5\0\2\30\4\0"+
    "\14\30\1\156\6\30\26\0\1\30\5\0\2\30\4\0"+
    "\17\30\1\157\3\30\26\0\1\30\5\0\2\30\4\0"+
    "\13\30\1\160\7\30\26\0\1\30\5\0\2\30\4\0"+
    "\17\30\1\161\3\30\26\0\1\30\5\0\2\30\4\0"+
    "\3\30\1\162\17\30\26\0\1\30\5\0\2\30\4\0"+
    "\17\30\1\163\3\30\26\0\1\30\5\0\2\30\4\0"+
    "\1\30\1\164\21\30\26\0\1\30\5\0\2\30\4\0"+
    "\17\30\1\165\3\30\26\0\1\30\5\0\2\30\4\0"+
    "\10\30\1\166\12\30\26\0\1\30\5\0\2\30\4\0"+
    "\1\167\14\30\1\170\5\30\26\0\1\30\5\0\2\30"+
    "\4\0\14\30\1\171\6\30\26\0\1\30\5\0\2\30"+
    "\4\0\1\172\17\30\1\173\2\30\26\0\1\30\5\0"+
    "\2\30\4\0\14\30\1\174\6\30\26\0\1\30\5\0"+
    "\2\30\4\0\4\30\1\175\16\30\26\0\1\30\5\0"+
    "\2\30\4\0\4\30\1\176\2\30\1\177\13\30\4\0"+
    "\21\74\1\200\43\74\22\0\1\145\6\0\1\201\10\0"+
    "\1\201\44\0\1\30\5\0\2\30\4\0\16\30\1\202"+
    "\4\30\26\0\1\30\5\0\2\30\4\0\17\30\1\203"+
    "\3\30\26\0\1\30\5\0\2\30\4\0\4\30\1\204"+
    "\16\30\26\0\1\30\5\0\2\30\4\0\11\30\1\205"+
    "\11\30\26\0\1\30\5\0\2\30\4\0\16\30\1\206"+
    "\4\30\26\0\1\30\5\0\2\30\4\0\10\30\1\207"+
    "\12\30\26\0\1\30\5\0\2\30\4\0\14\30\1\210"+
    "\6\30\26\0\1\30\5\0\2\30\4\0\2\30\1\211"+
    "\20\30\26\0\1\30\5\0\2\30\4\0\20\30\1\212"+
    "\2\30\26\0\1\30\5\0\2\30\4\0\5\30\1\213"+
    "\15\30\26\0\1\30\5\0\2\30\4\0\17\30\1\214"+
    "\3\30\26\0\1\30\5\0\2\30\4\0\20\30\1\215"+
    "\2\30\26\0\1\30\5\0\2\30\4\0\4\30\1\216"+
    "\16\30\26\0\1\30\5\0\2\30\4\0\7\30\1\217"+
    "\13\30\26\0\1\30\5\0\2\30\4\0\4\30\1\220"+
    "\16\30\26\0\1\30\5\0\2\30\4\0\4\30\1\221"+
    "\16\30\26\0\1\30\5\0\2\30\4\0\15\30\1\222"+
    "\5\30\26\0\1\30\5\0\2\30\4\0\10\30\1\223"+
    "\12\30\21\0\1\224\1\0\1\224\2\0\1\225\64\0"+
    "\1\30\5\0\2\30\4\0\17\30\1\226\3\30\26\0"+
    "\1\30\5\0\2\30\4\0\4\30\1\227\16\30\26\0"+
    "\1\30\5\0\2\30\4\0\4\30\1\230\16\30\26\0"+
    "\1\30\5\0\2\30\4\0\6\30\1\231\14\30\26\0"+
    "\1\30\5\0\2\30\4\0\15\30\1\232\5\30\26\0"+
    "\1\30\5\0\2\30\4\0\7\30\1\233\13\30\26\0"+
    "\1\30\5\0\2\30\4\0\2\30\1\234\20\30\26\0"+
    "\1\30\5\0\2\30\4\0\15\30\1\235\5\30\26\0"+
    "\1\30\5\0\2\30\4\0\17\30\1\236\3\30\26\0"+
    "\1\30\5\0\2\30\4\0\4\30\1\237\16\30\26\0"+
    "\1\30\5\0\2\30\4\0\4\30\1\240\16\30\26\0"+
    "\1\225\64\0\1\30\5\0\2\30\4\0\12\30\1\241"+
    "\10\30\26\0\1\30\5\0\2\30\4\0\2\30\1\242"+
    "\20\30\26\0\1\30\5\0\2\30\4\0\17\30\1\243"+
    "\3\30\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5353];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\3\1\2\11\2\1\1\11"+
    "\5\1\1\11\4\1\2\11\16\1\1\11\1\1\2\11"+
    "\1\0\1\11\1\0\3\11\1\0\1\11\1\1\1\0"+
    "\4\11\1\1\1\0\1\1\1\11\1\0\1\11\1\1"+
    "\4\11\1\1\1\11\31\1\3\11\1\0\1\1\2\11"+
    "\30\1\1\11\1\0\22\1\1\0\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RustLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 84: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 85: break;
          case 3:
            { return RustTokenTypes.NOT;
            }
          // fall through
          case 86: break;
          case 4:
            { return RustTokenTypes.HASH;
            }
          // fall through
          case 87: break;
          case 5:
            { return RustTokenTypes.MOD;
            }
          // fall through
          case 88: break;
          case 6:
            { return RustTokenTypes.AND;
            }
          // fall through
          case 89: break;
          case 7:
            { return RustTokenTypes.LPAREN;
            }
          // fall through
          case 90: break;
          case 8:
            { return RustTokenTypes.RPAREN;
            }
          // fall through
          case 91: break;
          case 9:
            { return RustTokenTypes.MUL;
            }
          // fall through
          case 92: break;
          case 10:
            { return RustTokenTypes.PLUS;
            }
          // fall through
          case 93: break;
          case 11:
            { return RustTokenTypes.COMMA;
            }
          // fall through
          case 94: break;
          case 12:
            { return RustTokenTypes.MINUS;
            }
          // fall through
          case 95: break;
          case 13:
            { return RustTokenTypes.DOT;
            }
          // fall through
          case 96: break;
          case 14:
            { return RustTokenTypes.DIV;
            }
          // fall through
          case 97: break;
          case 15:
            { return RustTokenTypes.INTEGER_LITERAL;
            }
          // fall through
          case 98: break;
          case 16:
            { return RustTokenTypes.COLON;
            }
          // fall through
          case 99: break;
          case 17:
            { return RustTokenTypes.SEMICOLON;
            }
          // fall through
          case 100: break;
          case 18:
            { return RustTokenTypes.LT;
            }
          // fall through
          case 101: break;
          case 19:
            { return RustTokenTypes.EQ;
            }
          // fall through
          case 102: break;
          case 20:
            { return RustTokenTypes.GT;
            }
          // fall through
          case 103: break;
          case 21:
            { return RustTokenTypes.IDENTIFIER;
            }
          // fall through
          case 104: break;
          case 22:
            { return RustTokenTypes.LBRACK;
            }
          // fall through
          case 105: break;
          case 23:
            { return RustTokenTypes.RBRACK;
            }
          // fall through
          case 106: break;
          case 24:
            { return RustTokenTypes.XOR;
            }
          // fall through
          case 107: break;
          case 25:
            { return RustTokenTypes.LBRACE;
            }
          // fall through
          case 108: break;
          case 26:
            { return RustTokenTypes.OR;
            }
          // fall through
          case 109: break;
          case 27:
            { return RustTokenTypes.RBRACE;
            }
          // fall through
          case 110: break;
          case 28:
            { return RustTokenTypes.NEQ;
            }
          // fall through
          case 111: break;
          case 29:
            { return RustTokenTypes.STRING_LITERAL;
            }
          // fall through
          case 112: break;
          case 30:
            { return RustTokenTypes.MODEQ;
            }
          // fall through
          case 113: break;
          case 31:
            { return RustTokenTypes.ANDAND;
            }
          // fall through
          case 114: break;
          case 32:
            { return RustTokenTypes.ANDEQ;
            }
          // fall through
          case 115: break;
          case 33:
            { return RustTokenTypes.CHAR_LITERAL;
            }
          // fall through
          case 116: break;
          case 34:
            { return RustTokenTypes.LIFETIME;
            }
          // fall through
          case 117: break;
          case 35:
            { return RustTokenTypes.MULEQ;
            }
          // fall through
          case 118: break;
          case 36:
            { return RustTokenTypes.PLUSEQ;
            }
          // fall through
          case 119: break;
          case 37:
            { return RustTokenTypes.MINUSEQ;
            }
          // fall through
          case 120: break;
          case 38:
            { return RustTokenTypes.ARROW;
            }
          // fall through
          case 121: break;
          case 39:
            { return RustTokenTypes.DOTDOT;
            }
          // fall through
          case 122: break;
          case 40:
            { return RustTokenTypes.LINE_COMMENT;
            }
          // fall through
          case 123: break;
          case 41:
            { return RustTokenTypes.DIVEQ;
            }
          // fall through
          case 124: break;
          case 42:
            { return RustTokenTypes.COLONCOLON;
            }
          // fall through
          case 125: break;
          case 43:
            { return RustTokenTypes.SHL;
            }
          // fall through
          case 126: break;
          case 44:
            { return RustTokenTypes.LTEQ;
            }
          // fall through
          case 127: break;
          case 45:
            { return RustTokenTypes.EQEQ;
            }
          // fall through
          case 128: break;
          case 46:
            { return RustTokenTypes.FAT_ARROW;
            }
          // fall through
          case 129: break;
          case 47:
            { return RustTokenTypes.GTEQ;
            }
          // fall through
          case 130: break;
          case 48:
            { return RustTokenTypes.SHR;
            }
          // fall through
          case 131: break;
          case 49:
            { return RustTokenTypes.XOREQ;
            }
          // fall through
          case 132: break;
          case 50:
            { return RustTokenTypes.AS;
            }
          // fall through
          case 133: break;
          case 51:
            { return RustTokenTypes.FN;
            }
          // fall through
          case 134: break;
          case 52:
            { return RustTokenTypes.IF;
            }
          // fall through
          case 135: break;
          case 53:
            { return RustTokenTypes.IN;
            }
          // fall through
          case 136: break;
          case 54:
            { return RustTokenTypes.OREQ;
            }
          // fall through
          case 137: break;
          case 55:
            { return RustTokenTypes.OROR;
            }
          // fall through
          case 138: break;
          case 56:
            { return RustTokenTypes.DOTDOTEQ;
            }
          // fall through
          case 139: break;
          case 57:
            { return RustTokenTypes.FLOAT_LITERAL;
            }
          // fall through
          case 140: break;
          case 58:
            { return RustTokenTypes.SHLEQ;
            }
          // fall through
          case 141: break;
          case 59:
            { return RustTokenTypes.SHREQ;
            }
          // fall through
          case 142: break;
          case 60:
            { return RustTokenTypes.FOR;
            }
          // fall through
          case 143: break;
          case 61:
            { return RustTokenTypes.LET;
            }
          // fall through
          case 144: break;
          case 62:
            { return RustTokenTypes.MUT;
            }
          // fall through
          case 145: break;
          case 63:
            { return RustTokenTypes.PUB;
            }
          // fall through
          case 146: break;
          case 64:
            { return RustTokenTypes.USE;
            }
          // fall through
          case 147: break;
          case 65:
            { return RustTokenTypes.BLOCK_COMMENT;
            }
          // fall through
          case 148: break;
          case 66:
            { return RustTokenTypes.ELSE;
            }
          // fall through
          case 149: break;
          case 67:
            { return RustTokenTypes.ENUM;
            }
          // fall through
          case 150: break;
          case 68:
            { return RustTokenTypes.IMPL;
            }
          // fall through
          case 151: break;
          case 69:
            { return RustTokenTypes.LOOP;
            }
          // fall through
          case 152: break;
          case 70:
            { return RustTokenTypes.SELF;
            }
          // fall through
          case 153: break;
          case 71:
            { return RustTokenTypes.TRUE;
            }
          // fall through
          case 154: break;
          case 72:
            { return RustTokenTypes.TYPE;
            }
          // fall through
          case 155: break;
          case 73:
            { return RustTokenTypes.CONST;
            }
          // fall through
          case 156: break;
          case 74:
            { return RustTokenTypes.CRATE;
            }
          // fall through
          case 157: break;
          case 75:
            { return RustTokenTypes.FALSE;
            }
          // fall through
          case 158: break;
          case 76:
            { return RustTokenTypes.MATCH;
            }
          // fall through
          case 159: break;
          case 77:
            { return RustTokenTypes.SUPER;
            }
          // fall through
          case 160: break;
          case 78:
            { return RustTokenTypes.TRAIT;
            }
          // fall through
          case 161: break;
          case 79:
            { return RustTokenTypes.WHERE;
            }
          // fall through
          case 162: break;
          case 80:
            { return RustTokenTypes.WHILE;
            }
          // fall through
          case 163: break;
          case 81:
            { return RustTokenTypes.RETURN;
            }
          // fall through
          case 164: break;
          case 82:
            { return RustTokenTypes.STATIC;
            }
          // fall through
          case 165: break;
          case 83:
            { return RustTokenTypes.STRUCT;
            }
          // fall through
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
